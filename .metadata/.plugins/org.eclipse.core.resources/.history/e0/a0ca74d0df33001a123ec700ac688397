#include <stdlib.h>
#include <stdio.h>
#include <system.h>
#include "io.h"
#include <math.h>

float *mapminmax(float input[])
{
    int i;
    float ymax=1,ymin=-1;
    float xmin[]={0.1,51,13,24,32};
    float xmax[]={37.25,83,19,30,52};
    static float output[5];				//<--------------segun el numero de entradas
    for(i=0;i<5;i++)					//<--------------segun el numero de entradas
    {
        output[i]=((ymax-ymin)/(xmax[i]-xmin[i]))*(input[i]-xmin[i])+ymin;
        printf("%f\n",output[i]);
    }
    return output;
}
/*=======  producto punto =========*/
float DotProduct(float input1[], float input2[])
{
    int i=0;
    float acumulador=0;
    for (i=0;i!=5;i++)					//<--------------segun el numero de entradas
    {
        acumulador=input1[i]*input2[i]+acumulador;
    }
    return acumulador;
}
/*=======  tangente sigmoidal =========*/
float tansig(float input1)
{
    float tansigout=(2/(1+exp(-2*input1))-1);
    return tansigout;
}
/*=======  hidden layer =========*/
float *layer1(float *input1)
{
    float static output[10];
    float w0[]={1.3429602595496334949,2.4640878938717167834,0.39495514316749774641,-0.90117191988743661213,0.35359643307197702322};
    float w1[]={-0.14279906762815919308,0.0192623757156580519,1.3314326924030628341,-0.36561632290867240869,2.0084035978000920331};
    float w2[]={0.18357336175625121877,0.060428929650758966829,0.22068017973731751669,3.0804514569410166303,9.466910330002907159};
    float w3[]={-0.015179223569523961346,0.28388684242725181761,-0.21895403123318288308,-0.69117690190900471503,-1.1698240004933713188};
    float w4[]={0.0010264224613505262829,0.54440001105331703446,0.073648048501351981443,-0.63879691824025319757,0.92666886806160542189};
    float w5[]={-0.19528955493481076067,1.087167432537815337,-0.0099078673019529807375,-0.81601545827073229677,0.76974069223677410445};
    float w6[]={-0.46424358683263189373,1.5828121341636918196,-0.23770329343757606866,-0.59499557786972323559,0.34097346878666395797};
    float w7[]={-0.25392183768338449923,1.8622536681654058288,0.36391691036848561325,-0.55107714806946928032,-1.2116971352295800024};
	float w8[]={0.38480075839248978342,0.04249926003823468329,0.8606378419757417797,0.12528405874563552924,-1.4101827894193001978};
	float w9[]={1.4815409326756612263,-0.52300813580124350111,-1.0147384325846877662,1.1236057819930480584,-1.4055470392359856735};
	output[0]=tansig(DotProduct(input1,w0)+(-3.2902816603893763059));
    output[1]=tansig(DotProduct(input1,w1)+(-1.0774370403746600378));
    output[2]=tansig(DotProduct(input1,w2)+(9.2813908302064689337));
    output[3]=tansig(DotProduct(input1,w3)+(-2.1012760240229342301));
    output[4]=tansig(DotProduct(input1,w4)+(0.5031622285530945593));
    output[5]=tansig(DotProduct(input1,w5)+(0.5577989336033097878));
    output[6]=tansig(DotProduct(input1,w6)+(0.30645761337057264573));
    output[7]=tansig(DotProduct(input1,w7)+(1.0923240690661593089));
    output[8]=tansig(DotProduct(input1,w8)+(1.6808282304872848023));
	output[9]=tansig(DotProduct(input1,w9)+(2.3813398545941724116));
    return output;
}
/*=======  producto punto =========*/
float DotProduct1(float input1[], float input2[])
{
    int i=0;
    float acumulador=0;
    for (i=0;i!=10;i++)									//<--------Segun el numero de neuronas en el hidden layer
    {
        acumulador=input1[i]*input2[i]+acumulador;
    }
    return acumulador;
}
/*=======  funcion mapminreverse =========*/
float mapminreverse(float input)
{
    float ymax=1,ymin=-1;
    float xmin=32;										//<--------min salida
    float xmax=52;										//<--------max salida
    static float output;
    output=((xmax-xmin)/(ymax-ymin))*(input-ymin)+xmin;
    return output;
}
/*=======  output layer =========*/
float layer2(float *input1)
{
    float static output1;
    float w0[]={0.1770890458616809493,0.18442331894640406897,-4.131073713753200316,-2.482458842655363096,1.6736695009645763399,-1.5433245094111347484,0.67502930505177860532,-0.19344688191339304284,-0.17768324384102607283,0.25820352972869753394};
    output1=DotProduct1(input1,w0)+(1.9015988320641858955);
	return mapminreverse(output1);
}

int main (void) {
	volatile int * ADC = (int *) 0x4041020;//asignar la memoria del ADC
	int * memoria = (int *) 0x00; // SDRAM address
	//Variable de lectura
	unsigned int ldr;
	unsigned int humedad_suelo;
	unsigned int humedad_aire;
	unsigned int temperatura;
	//Canales mediciones
	unsigned int canal_ldr;
	unsigned int canal_humedad_suelo;
	unsigned int canal_humedad_aire;
	unsigned int canal_temperatura;

	while (1){
		*(ADC) = 0; //setear valores de los canales en 0
		//Asignar valores a los canales
		canal_ldr = 0;
		canal_humedad_suelo = 1;
		canal_humedad_aire = 2;
		canal_temperatura = 3;
		//Lectura LDR
		ldr = *(ADC+canal_ldr); //Obtener el valor del ldr
		ldr=(ldr*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
		printf("El valor del LDR en el canal %d es --> %d Porciento \n",canal_ldr,ldr);

		//Lectura FC-28
		humedad_suelo = *(ADC+canal_humedad_suelo); //Obtener el valor del sensor FC-28
		humedad_suelo=(humedad_suelo*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
		printf("El valor del sensor FC-28 en el canal %d es --> %d Porciento \n",canal_humedad_suelo,humedad_suelo);

		//Lectura Humedad del aire
		humedad_aire = *(ADC+canal_humedad_aire); //Obtener el valor de la humedad del aire
		humedad_aire=(humedad_aire*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
		printf("El valor de la humedad del aire en el canal %d es --> %d Porciento \n",canal_humedad_aire,humedad_aire);

		//Lectura de la temperatura del ambiente
		temperatura = *(ADC+canal_temperatura); //Obtener el valor de la humedad del aire
		//temperatura=(temperatura*3.3)*100/(4095*3)-10; //Convertir el valor en porcentaje
		printf("El valor de la temperatura en el canal %d es --> %d Porciento \n",canal_temperatura,temperatura);

		//Escritura en memoria
		IOWR(memoria,0x000,ldr);
		IOWR(memoria,0x001,humedad_suelo);
		IOWR(memoria,0x002,humedad_aire);
		IOWR(memoria,0x003,temperatura);

		float niNN[]={0.1,79,19,24,44}; //'Tiempo','Luz','Humedad Aire','Temperatura','Humedad Suelo'
		int n;
		float *GPP1=mapminmax(niNN);
		float input1[6];									//<--------------segun el numero de entradas
		float input2[10];									//<--------Segun el numero de neuronas en el hidden layer
		for(n=0;n<5;n++)									//<--------------segun el numero de entradas
		{
			input1[n]=GPP1[n];
			//printf("%f\n",input1[n]);
		}
		float *GPP2=layer1(input1);
		for(n=0;n<10;n++)									//<--------Segun el numero de neuronas en el hidden layer
		{
			input2[n]=GPP2[n];
			//printf("%f\n",input2[n]);
		}
		float output=layer2(input2);
		printf("Sensor virtual es: %f\n",output);
		//Guardar en memoria sensor virtual
		IOWR(memoria,0x004,output);
		usleep(100000);
		//data = data/16; //Ignore the lowest 4 bits
	}
	return 0;
}
